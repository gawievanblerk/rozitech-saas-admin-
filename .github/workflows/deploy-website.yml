name: Deploy Rozitech Website with Functional Buttons

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.XNEELO_SSH_KEY }}
      
      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.XNEELO_SERVER_HOST }} >> ~/.ssh/known_hosts
      
      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection to production server..."
          ssh -o ConnectTimeout=10 ${{ secrets.XNEELO_SERVER_USER }}@${{ secrets.XNEELO_SERVER_HOST }} "echo 'SSH connection successful' && whoami && pwd && ls -la"
      
      - name: Create Deployment Archive
        run: |
          echo "Creating deployment archive..."
          
          # Create a deployable package
          tar -czf rozitech-website.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='cypress' \
            --exclude='*.pyc' \
            --exclude='__pycache__' \
            --exclude='.env*' \
            --exclude='logs' \
            --exclude='media' \
            .
          
          echo "Archive created: $(ls -lh rozitech-website.tar.gz)"
      
      - name: Upload Application to Server
        run: |
          echo "Uploading application to server..."
          scp rozitech-website.tar.gz ${{ secrets.XNEELO_SERVER_USER }}@${{ secrets.XNEELO_SERVER_HOST }}:/tmp/
      
      - name: Deploy Website Files
        run: |
          ssh ${{ secrets.XNEELO_SERVER_USER }}@${{ secrets.XNEELO_SERVER_HOST }} << 'ENDSSH'
            set -e
            
            echo "üöÄ Starting Rozitech Website Deployment..."
            
            # Find the web root directory
            WEB_ROOT=""
            if [ -d "/var/www/html" ]; then
              WEB_ROOT="/var/www/html"
            elif [ -d "/home/$USER/public_html" ]; then
              WEB_ROOT="/home/$USER/public_html"
            elif [ -d "/usr/share/nginx/html" ]; then
              WEB_ROOT="/usr/share/nginx/html"
            else
              echo "‚ùå Could not find web root directory"
              exit 1
            fi
            
            echo "üìÇ Using web root: $WEB_ROOT"
            
            # Backup existing index.html
            if [ -f "$WEB_ROOT/index.html" ]; then
              echo "üì¶ Backing up existing website..."
              sudo cp "$WEB_ROOT/index.html" "$WEB_ROOT/index.html.backup-$(date +%Y%m%d-%H%M%S)" || true
            fi
            
            # Create deployment directory
            mkdir -p /tmp/rozitech-deploy
            cd /tmp/rozitech-deploy
            
            # Extract uploaded files
            echo "üì• Extracting new website files..."
            tar -xzf /tmp/rozitech-website.tar.gz
            
            # Deploy the quick-deploy files (our working website)
            echo "üåê Deploying website files..."
            if [ -d "quick-deploy" ]; then
              sudo cp quick-deploy/index.html "$WEB_ROOT/" || sudo cp website_pages/index-example.html "$WEB_ROOT/index.html"
              sudo cp quick-deploy/get-started.html "$WEB_ROOT/" || sudo cp website_pages/get-started.html "$WEB_ROOT/"
              sudo cp quick-deploy/learn-more.html "$WEB_ROOT/" || sudo cp website_pages/learn-more.html "$WEB_ROOT/"
            else
              # Fallback to website_pages
              sudo cp website_pages/index-example.html "$WEB_ROOT/index.html" || true
              sudo cp website_pages/get-started.html "$WEB_ROOT/" || true
              sudo cp website_pages/learn-more.html "$WEB_ROOT/" || true
            fi
            
            # Set proper permissions
            echo "üîß Setting file permissions..."
            sudo chown -R www-data:www-data "$WEB_ROOT"/*.html 2>/dev/null || sudo chown -R nginx:nginx "$WEB_ROOT"/*.html 2>/dev/null || true
            sudo chmod 644 "$WEB_ROOT"/*.html || true
            
            # Test web server configuration
            echo "üß™ Testing web server..."
            if command -v nginx >/dev/null; then
              sudo nginx -t && echo "‚úÖ Nginx config is valid" || echo "‚ö†Ô∏è Nginx config issues"
              sudo systemctl reload nginx && echo "‚úÖ Nginx reloaded" || echo "‚ö†Ô∏è Nginx reload failed"
            elif command -v apache2ctl >/dev/null; then
              sudo apache2ctl configtest && echo "‚úÖ Apache config is valid" || echo "‚ö†Ô∏è Apache config issues"
              sudo systemctl reload apache2 && echo "‚úÖ Apache reloaded" || echo "‚ö†Ô∏è Apache reload failed"
            fi
            
            # Cleanup
            rm -rf /tmp/rozitech-deploy /tmp/rozitech-website.tar.gz
            
            echo "‚úÖ Website deployment completed!"
            echo "üìã Deployed files:"
            ls -la "$WEB_ROOT"/*.html | grep -E "(index|get-started|learn-more)" || true
            
          ENDSSH
      
      - name: Verify Deployment
        run: |
          echo "üß™ Verifying deployment..."
          
          # Wait a moment for web server to reload
          sleep 5
          
          # Test the deployment
          ssh ${{ secrets.XNEELO_SERVER_USER }}@${{ secrets.XNEELO_SERVER_HOST }} << 'ENDSSH'
            echo "Testing deployed website..."
            
            # Test local access to files
            echo "üìÅ Checking deployed files..."
            WEB_ROOT=""
            if [ -d "/var/www/html" ]; then
              WEB_ROOT="/var/www/html"
            elif [ -d "/home/$USER/public_html" ]; then
              WEB_ROOT="/home/$USER/public_html"
            elif [ -d "/usr/share/nginx/html" ]; then
              WEB_ROOT="/usr/share/nginx/html"
            fi
            
            if [ -f "$WEB_ROOT/index.html" ]; then
              echo "‚úÖ index.html exists"
            else
              echo "‚ùå index.html missing"
            fi
            
            if [ -f "$WEB_ROOT/get-started.html" ]; then
              echo "‚úÖ get-started.html exists"
            else
              echo "‚ùå get-started.html missing"
            fi
            
            if [ -f "$WEB_ROOT/learn-more.html" ]; then
              echo "‚úÖ learn-more.html exists"
            else
              echo "‚ùå learn-more.html missing"
            fi
            
            # Test content
            echo "üìÑ Checking content..."
            if grep -q "Get Started" "$WEB_ROOT/index.html" 2>/dev/null; then
              echo "‚úÖ Get Started button found in homepage"
            else
              echo "‚ùå Get Started button not found"
            fi
            
            if grep -q "Learn More" "$WEB_ROOT/index.html" 2>/dev/null; then
              echo "‚úÖ Learn More button found in homepage"
            else
              echo "‚ùå Learn More button not found"
            fi
            
            if grep -q "href=\"get-started.html\"" "$WEB_ROOT/index.html" 2>/dev/null; then
              echo "‚úÖ Get Started button properly linked"
            else
              echo "‚ùå Get Started button not properly linked"
            fi
            
            if grep -q "href=\"learn-more.html\"" "$WEB_ROOT/index.html" 2>/dev/null; then
              echo "‚úÖ Learn More button properly linked"
            else
              echo "‚ùå Learn More button not properly linked"
            fi
            
            # Test HTTP access (if possible)
            echo "üåê Testing HTTP access..."
            if command -v curl >/dev/null; then
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/ 2>/dev/null || echo "000")
              if [ "$HTTP_CODE" = "200" ]; then
                echo "‚úÖ Website responds with HTTP 200"
              else
                echo "‚ö†Ô∏è Website HTTP status: $HTTP_CODE"
              fi
            fi
            
            echo "üéâ Verification completed!"
          ENDSSH
      
      - name: Deployment Summary
        run: |
          echo "üéâ Deployment Summary"
          echo "===================="
          echo ""
          echo "üì± Website URLs:"
          echo "   Homepage:     https://rozitech.com/"
          echo "   Get Started:  https://rozitech.com/get-started/"
          echo "   Learn More:   https://rozitech.com/learn-more/"
          echo ""
          echo "üîß Features Deployed:"
          echo "   ‚úÖ Functional Get Started button"
          echo "   ‚úÖ Functional Learn More button"
          echo "   ‚úÖ Responsive design"
          echo "   ‚úÖ Complete user journey"
          echo ""
          echo "üìû Support: hello@rozitech.com"