name: Deploy to Xneelo

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: rozitech-saas
  DOCKER_IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        run: |
          python manage.py test --settings=config.settings.development
        env:
          SECRET_KEY: 'test-secret-key-for-ci'
          DEBUG: 'True'
          DATABASE_URL: 'sqlite:///test.db'

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        run: |
          docker build -f Dockerfile.production -t rozitech-saas:latest -t rozitech-saas:${{ github.sha }} .
      
      - name: Save Docker image
        run: |
          docker save rozitech-saas:latest | gzip > rozitech-saas.tar.gz
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.XNEELO_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.XNEELO_SERVER_HOST }} >> ~/.ssh/known_hosts
      
      - name: Copy files to server
        run: |
          # Create deployment directory on server
          ssh -i ~/.ssh/deploy_key ${{ secrets.XNEELO_SERVER_USER }}@${{ secrets.XNEELO_SERVER_HOST }} "mkdir -p /opt/rozitech-saas/{nginx/conf.d,deployment}"
          
          # Copy Docker image
          scp -i ~/.ssh/deploy_key rozitech-saas.tar.gz ${{ secrets.XNEELO_SERVER_USER }}@${{ secrets.XNEELO_SERVER_HOST }}:/opt/rozitech-saas/
          
          # Copy configuration files
          scp -i ~/.ssh/deploy_key docker-compose.production.yml ${{ secrets.XNEELO_SERVER_USER }}@${{ secrets.XNEELO_SERVER_HOST }}:/opt/rozitech-saas/docker-compose.yml
          scp -i ~/.ssh/deploy_key nginx/nginx.conf ${{ secrets.XNEELO_SERVER_USER }}@${{ secrets.XNEELO_SERVER_HOST }}:/opt/rozitech-saas/nginx/
          scp -i ~/.ssh/deploy_key nginx/conf.d/rozitech.conf ${{ secrets.XNEELO_SERVER_USER }}@${{ secrets.XNEELO_SERVER_HOST }}:/opt/rozitech-saas/nginx/conf.d/
      
      - name: Deploy to Xneelo server
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.XNEELO_SERVER_USER }}@${{ secrets.XNEELO_SERVER_HOST }} << 'ENDSSH'
            cd /opt/rozitech-saas
            
            # Load Docker image
            docker load < rozitech-saas.tar.gz
            
            # Create .env file if not exists
            if [ ! -f .env ]; then
              cat > .env << EOF
          SECRET_KEY=$(python3 -c 'import secrets; print(secrets.token_urlsafe(50))')
          DB_PASSWORD=$(python3 -c 'import secrets; print(secrets.token_urlsafe(32))')
          ALLOWED_HOSTS=rozitech.com,rozitech.co.za,www.rozitech.com,www.rozitech.co.za,154.65.107.234
          EOF
            fi
            
            # Stop existing containers
            docker-compose down || true
            
            # Start new containers
            docker-compose up -d
            
            # Run migrations
            docker-compose exec -T web python manage.py migrate --noinput
            
            # Collect static files
            docker-compose exec -T web python manage.py collectstatic --noinput
            
            # Health check
            sleep 10
            curl -f http://localhost/health/ || exit 1
            
            echo "Deployment successful!"
          ENDSSH
      
      - name: Clean up
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          rm -f rozitech-saas.tar.gz

  notify:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "✅ Deployment to Xneelo successful!"
          else
            echo "❌ Deployment to Xneelo failed!"
          fi